{"ast":null,"code":"import _defineProperty from \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\nconst Context = React.createContext();\nconst dumKeyPair = Pact.crypto.genKeyPair();\nconst savedAcct = localStorage.getItem('acct');\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accountName: savedAcct ? savedAcct : \"\",\n      coinBalance: \"n/a\",\n      loading: false,\n      reqKey: \"\",\n      msg: \"\",\n      err: false,\n      be: ''\n    };\n\n    this.convertDecimal = decimal => {\n      decimal = decimal.toString();\n\n      if (decimal[0] === \".\") {\n        return \"0\" + decimal;\n      }\n\n      if (decimal.includes('.')) {\n        return decimal;\n      }\n\n      if (decimal / Math.floor(decimal) === 1) {\n        decimal = decimal + \".0\";\n      }\n\n      return decimal;\n    };\n\n    this.setAccountName = async str => {\n      this.setState({\n        accountName: str\n      });\n      await localStorage.setItem('acct', str);\n    };\n\n    this.getCoinBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(user.silver-token.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair,\n        caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n        meta: Pact.lang.mkMeta(config.meta.sender, config.meta.chainId, config.meta.gasPrice, config.meta.gasLimit, config.meta.creationTime(), config.meta.ttl)\n      }, config.meta.host);\n      const data = await cmd;\n\n      if (data.status === \"success\") {\n        await this.setState({\n          coinBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          coinBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.listen = async reqKey => {\n      const res = await Pact.fetch.listen({\n        listen: reqKey\n      }, config.meta.host);\n      console.log(res);\n\n      if (res.status === 'success') {\n        this.setState({\n          msg: 'Success! Check out your '\n        });\n      } else {\n        this.setState({\n          msg: 'There was an error processing your '\n        });\n      }\n    };\n\n    this.sendST = async (acct, amount) => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(user.silver-token.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(acct), \" \").concat(amount, \")\"),\n          caps: [// Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.st-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n          Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.silver-token.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: \"3\",\n          ttl: 28800,\n          envData: {}\n        };\n        console.log(signCmd);\n        const cmd = await Pact.wallet.sign(signCmd);\n        console.log(cmd);\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.mint = async amount => {\n      //conf param is to be IMPLEMENTED\n      //  left as a placeholder to check on backend that the fiat payment was received\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://silver-token-api.chainweb.com/transaction/mint\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"mint\",\n            tx: {\n              account: this.state.accountName,\n              amount: amount,\n              conf: \"IMPLEMENT ME\"\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(config.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.burn = async amount => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://silver-token-api.chainweb.com/transaction/burn\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"burn\",\n            tx: {\n              account: this.state.accountName,\n              amount: amount\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(config.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.transfer = async (recp, amount) => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://silver-token-api.chainweb.com/transaction/transfer\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"transfer\",\n            tx: {\n              from: this.state.accountName,\n              to: recp,\n              amount: amount\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(config.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.download = (data, filename, type) => {\n      var file = new Blob([data], {\n        type: type\n      });\n      if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);else {\n        // Others\n        var a = document.createElement(\"a\"),\n            url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function () {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n        }, 0);\n      }\n    };\n\n    this.genKp = async () => {\n      var kp = Pact.crypto.genKeyPair();\n      var id = kp.publicKey.substring(0, 6);\n      var priv = \"public: \".concat(kp.publicKey, \"\\nsecret: \").concat(kp.secretKey);\n      var privName = \"private-keypair-\".concat(id, \".kda\");\n      await this.setAccountName(kp.publicKey);\n      this.download(priv, privName, \"text/plain;charset=utf-8\");\n    };\n\n    this.transferDirect = (recp, amount, privKey) => {\n      const amt = convertDecimal(amount);\n      const pactCode = \"(user.silver-token.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(recp), \" \").concat(amt, \")\");\n      const m = Pact.lang.mkMeta(config.meta.sender, config.meta.chainId, config.meta.gasPrice, config.meta.gasLimit, config.meta.creationTime(), config.meta.ttl);\n      const cmd = Pact.simple.exec.createCommand({\n        publicKey: this.state.accountName,\n        secretKey: privKey,\n        clist: [{\n          name: \"user.st-gas-station.GAS_PAYER\",\n          args: [\"hi\", {\n            int: 1\n          }, 1.0]\n        }, {\n          name: \"user.silver-token.TRANSFER\",\n          args: [this.state.accountName, recp, parseFloat(amount)]\n        }]\n      }, JSON.stringify(new Date()), pactCode, {}, m, config.meta.networkId);\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: _objectSpread({}, this.state, {\n        setAccountName: this.setAccountName,\n        getCoinBalance: this.getCoinBalance,\n        sendST: this.sendST,\n        mint: this.mint,\n        burn: this.burn,\n        transfer: this.transfer,\n        genKp: this.genKp\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js"],"names":["React","Pact","config","Context","createContext","dumKeyPair","crypto","genKeyPair","savedAcct","localStorage","getItem","PactStore","Component","state","accountName","coinBalance","loading","reqKey","msg","err","be","convertDecimal","decimal","toString","includes","Math","floor","setAccountName","str","setState","setItem","getCoinBalance","cmd","fetch","local","pactCode","JSON","stringify","keyPairs","caps","lang","mkCap","meta","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","data","status","substring","listen","res","console","log","sendST","acct","amount","signCmd","parseFloat","envData","wallet","sign","alert","window","location","reload","mint","headers","method","body","type","tx","account","conf","json","reqkey","networkId","slice","e","burn","transfer","recp","from","to","download","filename","file","Blob","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","href","appendChild","click","setTimeout","removeChild","revokeObjectURL","genKp","kp","id","publicKey","priv","secretKey","privName","transferDirect","privKey","amt","m","simple","exec","createCommand","clist","name","args","int","Date","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\n\nconst Context = React.createContext();\n\nconst dumKeyPair = Pact.crypto.genKeyPair();\n\nconst savedAcct = localStorage.getItem('acct');\n\nexport class PactStore extends React.Component {\n\n  state = {\n    accountName: (savedAcct ? savedAcct : \"\"),\n    coinBalance: \"n/a\",\n    loading: false,\n    reqKey: \"\",\n    msg: \"\",\n    err: false,\n    be: ''\n  }\n\n  convertDecimal = (decimal) => {\n    decimal = decimal.toString();\n    if (decimal[0] === \".\") {return \"0\" + decimal}\n    if (decimal.includes('.')) { return decimal }\n    if ((decimal / Math.floor(decimal)) === 1) {\n      decimal = decimal + \".0\"\n    }\n    return decimal\n  }\n\n  setAccountName = async (str) => {\n    this.setState({ accountName: str })\n    await localStorage.setItem('acct', str);\n  }\n\n  getCoinBalance = async () => {\n    const cmd = await Pact.fetch.local\n      ({\n        pactCode: `(user.silver-token.get-balance ${JSON.stringify(this.state.accountName)})`,\n        keyPairs: dumKeyPair,\n        caps:\n          [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])\n          ],\n        meta: Pact.lang.mkMeta\n          (\n            config.meta.sender,\n            config.meta.chainId,\n            config.meta.gasPrice,\n            config.meta.gasLimit,\n            config.meta.creationTime(),\n            config.meta.ttl\n          )\n      },\n      config.meta.host\n      )\n    const data = await cmd;\n    if (data.status === \"success\") {\n      await this.setState({ coinBalance: data.data.toString().substring(0,15) })\n    } else {\n      await this.setState({ coinBalance: \"n/a\" })\n    }\n  }\n\n  listen = async (reqKey) => {\n    const res = await Pact.fetch.listen({listen: reqKey}, config.meta.host);\n    console.log(res)\n    if (res.status === 'success') {\n      this.setState({ msg: 'Success! Check out your '})\n    } else {\n      this.setState({ msg: 'There was an error processing your '})\n    }\n  }\n\n  sendST = async (acct, amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(user.silver-token.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(acct)} ${amount})`,\n          caps: [\n            // Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.st-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.silver-token.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)])\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: \"3\",\n          ttl: 28800,\n          envData: {}\n        }\n\n      console.log(signCmd)\n      const cmd = await Pact.wallet.sign(signCmd)\n      console.log(cmd)\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  mint = async (amount) => {\n    //conf param is to be IMPLEMENTED\n    //  left as a placeholder to check on backend that the fiat payment was received\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://silver-token-api.chainweb.com/transaction/mint`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"mint\",\n        \ttx: {\n        \t\taccount: this.state.accountName,\n        \t\tamount: amount,\n        \t\tconf: \"IMPLEMENT ME\"\n        \t}\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${config.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  burn = async (amount) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://silver-token-api.chainweb.com/transaction/burn`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"burn\",\n        \ttx: {\n        \t\taccount: this.state.accountName,\n        \t\tamount: amount,\n        \t}\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${config.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  transfer = async (recp, amount) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://silver-token-api.chainweb.com/transaction/transfer`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"transfer\",\n          tx: {\n            from: this.state.accountName,\n            to: recp,\n            amount: amount,\n          }\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${config.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  download = (data, filename, type) => {\n    var file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    else { // Others\n        var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }, 0);\n    }\n  }\n\n  genKp = async () => {\n    var kp = Pact.crypto.genKeyPair();\n    var id = kp.publicKey.substring(0, 6);\n    var priv = `public: ${kp.publicKey}\\nsecret: ${kp.secretKey}`\n    var privName = `private-keypair-${id}.kda`\n    await this.setAccountName(kp.publicKey);\n    this.download(priv, privName, \"text/plain;charset=utf-8\");\n\n  }\n\n  transferDirect = (recp, amount, privKey) => {\n    const amt = convertDecimal(amount);\n    const pactCode = `(user.silver-token.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(recp)} ${amt})`\n    const m = Pact.lang.mkMeta\n      (\n        config.meta.sender,\n        config.meta.chainId,\n        config.meta.gasPrice,\n        config.meta.gasLimit,\n        config.meta.creationTime(),\n        config.meta.ttl\n      );\n    const cmd = Pact.simple.exec.createCommand\n      (\n        {\n          publicKey: this.state.accountName,\n          secretKey: privKey,\n          clist:\n            [\n              {name: \"user.st-gas-station.GAS_PAYER\", args: [\"hi\", {int: 1}, 1.0]},\n              {name: \"user.silver-token.TRANSFER\", args: [this.state.accountName, recp, parseFloat(amount)]}\n            ]\n        },\n        JSON.stringify(new Date()),\n        pactCode,\n        {},\n        m,\n        config.meta.networkId\n      )\n  }\n\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          setAccountName: this.setAccountName,\n          getCoinBalance: this.getCoinBalance,\n          sendST: this.sendST,\n          mint: this.mint,\n          burn: this.burn,\n          transfer: this.transfer,\n          genKp: this.genKp\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}