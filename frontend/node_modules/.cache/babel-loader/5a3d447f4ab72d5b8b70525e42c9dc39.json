{"ast":null,"code":"import _defineProperty from \"/Users/francescomelpignano/Desktop/kadena/code/bilira-demo/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/bilira-demo/frontend/src/contexts/PactContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\nconst Context = React.createContext();\nconst dumKeyPair = Pact.crypto.genKeyPair();\nconst network = localStorage.getItem('network');\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coinBalance: \"n/a\",\n      loading: false,\n      reqKey: \"\",\n      msg: \"\",\n      err: false,\n      be: '',\n      network: 'testnet',\n      meta: config.meta.testnet\n    };\n\n    this.changeNetwork = async () => {\n      if (this.state.network === 'testnet') {\n        this.setState({\n          network: 'mainnet',\n          meta: config.meta.mainnet\n        });\n      }\n\n      if (this.state.network === 'mainnet') {\n        this.setState({\n          network: 'testnet',\n          meta: config.meta.testnet\n        });\n      }\n    };\n\n    this.convertDecimal = decimal => {\n      decimal = decimal.toString();\n\n      if (decimal[0] === \".\") {\n        return \"0\" + decimal;\n      }\n\n      if (decimal.includes('.')) {\n        return decimal;\n      }\n\n      if (decimal / Math.floor(decimal) === 1) {\n        decimal = decimal + \".0\";\n      }\n\n      return decimal;\n    };\n\n    this.setAccountName = async str => {\n      this.setState({\n        accountName: str\n      });\n      await localStorage.setItem('acct', str);\n    };\n\n    this.getCoinBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(user.bilira.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair,\n        caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n        meta: Pact.lang.mkMeta(this.state.meta.sender, this.state.meta.chainId, this.state.meta.gasPrice, this.state.meta.gasLimit, this.state.meta.creationTime(), this.state.meta.ttl)\n      }, this.state.meta.host);\n      const data = await cmd;\n\n      if (data.status === \"success\") {\n        await this.setState({\n          coinBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          coinBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.listen = async reqKey => {\n      const res = await Pact.fetch.listen({\n        listen: reqKey\n      }, this.state.meta.host);\n      console.log(res);\n\n      if (res.status === 'success') {\n        this.setState({\n          msg: 'Success! Check out your '\n        });\n      } else {\n        this.setState({\n          msg: 'There was an error processing your '\n        });\n      }\n    };\n\n    this.mint = async amount => {\n      //conf param is to be IMPLEMENTED\n      //  left as a placeholder to check on backend that the fiat payment was received\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://bilira-api.chainweb.com/transaction/mint\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"mint\",\n            tx: {\n              account: this.state.accountName,\n              amount: amount,\n              conf: \"IMPLEMENT ME\"\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(this.state.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.burn = async amount => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://bilira-api.chainweb.com/transaction/burn\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"burn\",\n            tx: {\n              account: this.state.accountName,\n              amount: amount\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(this.state.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.transfer = async (recp, amount) => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://bilira-api.chainweb.com/transaction/transfer\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"transfer\",\n            tx: {\n              from: this.state.accountName,\n              to: recp,\n              amount: amount\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(this.state.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.download = (data, filename, type) => {\n      var file = new Blob([data], {\n        type: type\n      });\n      if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);else {\n        // Others\n        var a = document.createElement(\"a\"),\n            url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function () {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n        }, 0);\n      }\n    };\n\n    this.genKp = async () => {\n      var kp = Pact.crypto.genKeyPair();\n      var id = kp.publicKey.substring(0, 6);\n      var priv = \"public: \".concat(kp.publicKey, \"\\nsecret: \").concat(kp.secretKey);\n      var privName = \"private-keypair-\".concat(id, \".kda\");\n      await this.setAccountName(kp.publicKey);\n      this.download(priv, privName, \"text/plain;charset=utf-8\");\n    };\n\n    this.transferDirect = async (recp, amount, privKey) => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const amt = this.convertDecimal(amount);\n        const res = await Pact.fetch.send({\n          networkId: this.state.meta.networkId,\n          pactCode: \"(user.bilria.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(recp), \" \").concat(amt, \")\"),\n          keyPairs: [{\n            publicKey: this.state.accountName,\n            secretKey: privKey,\n            clist: [{\n              name: \"user.bilira.TRANSFER\",\n              args: [this.state.accountName, recp, parseFloat(amount)]\n            }, //capability to use gas station\n            {\n              name: \"user.bilira-gas-station.GAS_PAYER\",\n              args: [\"hi\", {\n                int: 1\n              }, 1.0]\n            }]\n          }],\n          meta: Pact.lang.mkMeta(this.state.meta.sender, this.state.meta.chainId, this.state.meta.gasPrice, this.state.meta.gasLimit, this.state.meta.creationTime(), this.state.meta.ttl)\n        }, this.state.meta.host);\n        const reqKey = res.requestKeys[0];\n        await this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(this.state.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.transferWallet = async (recp, amount) => {\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const amt = this.convertDecimal(amount);\n        const signCmd = {\n          pactCode: \"(user.bilira.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(recp), \" \").concat(amt, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.bilira-gas-station.GAS_PAYER\", [\"hi\", {\n            int: 1\n          }, 1.0]), Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.bilira.TRANSFER\", [this.state.accountName, recp, parseFloat(amount)])],\n          sender: this.state.meta.sender,\n          gasLimit: this.state.meta.gasLimit,\n          chainId: this.state.meta.chainId,\n          ttl: this.state.meta.ttl,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        console.log(cmd);\n        const res = await Pact.wallet.sendSigned(cmd, this.state.meta.host);\n        const reqKey = res.requestKeys[0];\n        await this.setState({\n          reqKey: reqKey,\n          be: \"https://explorer.chainweb.com/\".concat(this.state.meta.networkId.slice(0, -2), \"/tx/\").concat(reqKey)\n        });\n        await this.listen(reqKey);\n      } catch (err) {\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: _objectSpread({}, this.state, {\n        setAccountName: this.setAccountName,\n        getCoinBalance: this.getCoinBalance,\n        mint: this.mint,\n        burn: this.burn,\n        transfer: this.transfer,\n        genKp: this.genKp,\n        transferDirect: this.transferDirect,\n        transferWallet: this.transferWallet,\n        changeNetwork: this.changeNetwork\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/bilira-demo/frontend/src/contexts/PactContext.js"],"names":["React","Pact","config","Context","createContext","dumKeyPair","crypto","genKeyPair","network","localStorage","getItem","PactStore","Component","state","coinBalance","loading","reqKey","msg","err","be","meta","testnet","changeNetwork","setState","mainnet","convertDecimal","decimal","toString","includes","Math","floor","setAccountName","str","accountName","setItem","getCoinBalance","cmd","fetch","local","pactCode","JSON","stringify","keyPairs","caps","lang","mkCap","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","data","status","substring","listen","res","console","log","mint","amount","headers","method","body","type","tx","account","conf","json","reqkey","networkId","slice","e","alert","burn","transfer","recp","from","to","download","filename","file","Blob","window","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","href","appendChild","click","setTimeout","removeChild","revokeObjectURL","genKp","kp","id","publicKey","priv","secretKey","privName","transferDirect","privKey","amt","send","clist","name","args","parseFloat","int","requestKeys","transferWallet","signCmd","envData","wallet","sign","sendSigned","location","reload","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\n\nconst Context = React.createContext();\n\nconst dumKeyPair = Pact.crypto.genKeyPair();\n\nconst network = localStorage.getItem('network');\n\nexport class PactStore extends React.Component {\n\n  state = {\n    coinBalance: \"n/a\",\n    loading: false,\n    reqKey: \"\",\n    msg: \"\",\n    err: false,\n    be: '',\n    network: 'testnet',\n    meta: config.meta.testnet\n  }\n\n  changeNetwork = async () => {\n    if (this.state.network === 'testnet') {\n      this.setState({ network: 'mainnet', meta: config.meta.mainnet });\n    }\n    if (this.state.network === 'mainnet') {\n      this.setState({ network: 'testnet', meta: config.meta.testnet })\n    }\n  }\n\n  convertDecimal = (decimal) => {\n    decimal = decimal.toString();\n    if (decimal[0] === \".\") {return \"0\" + decimal}\n    if (decimal.includes('.')) { return decimal }\n    if ((decimal / Math.floor(decimal)) === 1) {\n      decimal = decimal + \".0\"\n    }\n    return decimal\n  }\n\n  setAccountName = async (str) => {\n    this.setState({ accountName: str })\n    await localStorage.setItem('acct', str);\n  }\n\n  getCoinBalance = async () => {\n    const cmd = await Pact.fetch.local\n      ({\n        pactCode: `(user.bilira.get-balance ${JSON.stringify(this.state.accountName)})`,\n        keyPairs: dumKeyPair,\n        caps:\n          [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])\n          ],\n        meta: Pact.lang.mkMeta\n          (\n            this.state.meta.sender,\n            this.state.meta.chainId,\n            this.state.meta.gasPrice,\n            this.state.meta.gasLimit,\n            this.state.meta.creationTime(),\n            this.state.meta.ttl\n          )\n      },\n      this.state.meta.host\n      )\n    const data = await cmd;\n    if (data.status === \"success\") {\n      await this.setState({ coinBalance: data.data.toString().substring(0,15) })\n    } else {\n      await this.setState({ coinBalance: \"n/a\" })\n    }\n  }\n\n  listen = async (reqKey) => {\n    const res = await Pact.fetch.listen({listen: reqKey}, this.state.meta.host);\n    console.log(res)\n    if (res.status === 'success') {\n      this.setState({ msg: 'Success! Check out your '})\n    } else {\n      this.setState({ msg: 'There was an error processing your '})\n    }\n  }\n\n  mint = async (amount) => {\n    //conf param is to be IMPLEMENTED\n    //  left as a placeholder to check on backend that the fiat payment was received\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://bilira-api.chainweb.com/transaction/mint`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"mint\",\n        \ttx: {\n        \t\taccount: this.state.accountName,\n        \t\tamount: amount,\n        \t\tconf: \"IMPLEMENT ME\"\n        \t}\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${this.state.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  burn = async (amount) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://bilira-api.chainweb.com/transaction/burn`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"burn\",\n        \ttx: {\n        \t\taccount: this.state.accountName,\n        \t\tamount: amount,\n        \t}\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${this.state.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  transfer = async (recp, amount) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://bilira-api.chainweb.com/transaction/transfer`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"transfer\",\n          tx: {\n            from: this.state.accountName,\n            to: recp,\n            amount: amount,\n          }\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${this.state.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  download = (data, filename, type) => {\n    var file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    else { // Others\n        var a = document.createElement(\"a\"),\n                url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }, 0);\n    }\n  }\n\n  genKp = async () => {\n    var kp = Pact.crypto.genKeyPair();\n    var id = kp.publicKey.substring(0, 6);\n    var priv = `public: ${kp.publicKey}\\nsecret: ${kp.secretKey}`\n    var privName = `private-keypair-${id}.kda`\n    await this.setAccountName(kp.publicKey);\n    this.download(priv, privName, \"text/plain;charset=utf-8\");\n\n  }\n\n  transferDirect = async (recp, amount, privKey) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const amt = this.convertDecimal(amount)\n      const res = await Pact.fetch.send(\n      {\n        networkId: this.state.meta.networkId,\n        pactCode:`(user.bilria.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(recp)} ${amt})`,\n        keyPairs: [\n          {\n            publicKey: this.state.accountName,\n            secretKey: privKey,\n            clist: [\n              {\n                name: \"user.bilira.TRANSFER\",\n                args: [this.state.accountName, recp, parseFloat(amount)]\n              },\n              //capability to use gas station\n              {\n                name: `user.bilira-gas-station.GAS_PAYER`,\n                args: [\"hi\", {int: 1}, 1.0]\n              }\n            ]\n          }],\n        meta: Pact.lang.mkMeta\n        (\n          this.state.meta.sender,\n          this.state.meta.chainId,\n          this.state.meta.gasPrice,\n          this.state.meta.gasLimit,\n          this.state.meta.creationTime(),\n          this.state.meta.ttl\n        )\n      }, this.state.meta.host);\n      const reqKey = res.requestKeys[0]\n      await this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${this.state.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n  }\n\n  transferWallet = async (recp, amount) => {\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const amt = this.convertDecimal(amount)\n      const signCmd = {\n          pactCode: `(user.bilira.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(recp)} ${amt})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.bilira-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n            Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.bilira.TRANSFER\", [this.state.accountName, recp, parseFloat(amount)]),\n          ],\n          sender: this.state.meta.sender,\n          gasLimit: this.state.meta.gasLimit,\n          chainId: this.state.meta.chainId,\n          ttl: this.state.meta.ttl,\n          envData: {}\n        }\n      const cmd = await Pact.wallet.sign(signCmd)\n      console.log(cmd)\n      const res = await Pact.wallet.sendSigned(cmd, this.state.meta.host)\n      const reqKey = res.requestKeys[0]\n      await this.setState({ reqKey: reqKey, be: `https://explorer.chainweb.com/${this.state.meta.networkId.slice(0, -2)}/tx/${reqKey}` })\n      await this.listen(reqKey)\n    } catch(err){\n      this.setState({ loading: false, msg: \"\" })\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          setAccountName: this.setAccountName,\n          getCoinBalance: this.getCoinBalance,\n          mint: this.mint,\n          burn: this.burn,\n          transfer: this.transfer,\n          genKp: this.genKp,\n          transferDirect: this.transferDirect,\n          transferWallet: this.transferWallet,\n          changeNetwork: this.changeNetwork\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}