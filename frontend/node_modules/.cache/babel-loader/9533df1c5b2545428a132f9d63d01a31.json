{"ast":null,"code":"import _defineProperty from \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nconst Context = React.createContext();\nconst hosts = [\"us2\", \"us1\", \"eu1\", \"eu2\", \"ap1\", \"ap2\"];\nconst chainId = \"3\";\nconst kuroUrls = [\"http://34.204.71.247:9002\", \"http://54.166.153.21:9000\", \"http://54.146.43.204:9001\", \"http://54.164.36.85:9003\"];\n\nconst createAPIHost = (network, chainId) => \"https://\".concat(network, \".testnet.chainweb.com/chainweb/0.0/testnet04/chain/\").concat(chainId, \"/pact\");\n\nconst dumKeyPair = Pact.crypto.genKeyPair();\nconst savedAcct = localStorage.getItem('acct');\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accountName: savedAcct ? savedAcct : \"\",\n      coinBalance: \"n/a\",\n      cwBalance: \"n/a\",\n      kuroBalance: \"n/a\"\n    };\n\n    this.convertDecimal = decimal => {\n      decimal = decimal.toString();\n\n      if (decimal[0] === \".\") {\n        return chainId + decimal;\n      }\n\n      if (decimal.includes('.')) {\n        return decimal;\n      }\n\n      if (decimal / Math.floor(decimal) === 1) {\n        decimal = decimal + \".0\";\n      }\n\n      return decimal;\n    };\n\n    this.setAccountName = async str => {\n      this.setState({\n        accountName: str\n      });\n      await localStorage.setItem('acct', str);\n    };\n\n    this.getCoinBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(user.silver-token.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair,\n        caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n        meta: Pact.lang.mkMeta(\"not-real\", chainId, 0.0000001, 5000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n      const data = await cmd;\n      console.log(data);\n\n      if (data.status === \"success\") {\n        await this.setState({\n          coinBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          coinBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.sendST = async (acct, amount) => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(user.silver-token.transfer \".concat(JSON.stringify(acct), \" \").concat(amount, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.covid-gas-station.GAS_PAYER\", [\"hi\", {\n            int: 1\n          }, 1.0]), Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"coin.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)])],\n          sender: \"st-gas-payer\",\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        console.log(cmd);\n        const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId));\n        console.log(reqKey);\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.sellHT = async amount => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(user.hybrid-exchange.sell-ht \".concat(JSON.stringify(this.state.accountName), \" \").concat(amount, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"coin.TRANSFER\", [\"hybrid-mg\", this.state.accountName, parseFloat(amount)]), Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"user.hybrid-exchange.REGISTERED_USER\", [this.state.accountName])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          network: \"testnet04\",\n          ttl: 28800,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId));\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.getCWBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(user.hybrid-exchange.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair,\n        caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n        meta: Pact.lang.mkMeta(\"not-real\", chainId, 0.0000001, 5000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n      const data = await cmd;\n\n      if (data.status === \"success\") {\n        await this.setState({\n          cwBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          cwBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.getKuroBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(hybrid-token.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair\n      }, kuroUrls[0]);\n      const data = await cmd;\n\n      if (data.status === \"success\") {\n        await this.setState({\n          kuroBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          kuroBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.transferCWKuro = async amount => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(user.hybrid-exchange.trans-to-priv \".concat(JSON.stringify(this.state.accountName), \" \").concat(amount, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"user.hybrid-exchange.REGISTERED_USER\", [this.state.accountName])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId));\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.transferKuroCW = async amount => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(hybrid-token.transfer-to-cw \".concat(JSON.stringify(this.state.accountName), \" \").concat(amount, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"hybrid-token.REGISTERED_USER\", [this.state.accountName])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        const reqKey = await Pact.wallet.sendSigned(cmd, kuroUrls[0]);\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.transferInKuro = async (account, amount) => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(hybrid-token.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(account), \" \").concat(amount, \")\"),\n          caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"hybrid-token.REGISTERED_USER\", [this.state.accountName])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        };\n        const cmd = await Pact.wallet.sign(signCmd);\n        const reqKey = await Pact.wallet.sendSigned(cmd, kuroUrls[0]);\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: _objectSpread({}, this.state, {\n        setAccountName: this.setAccountName,\n        getCoinBalance: this.getCoinBalance,\n        getCWBalance: this.getCWBalance,\n        getKuroBalance: this.getKuroBalance,\n        buyHT: this.buyHT,\n        sellHT: this.sellHT,\n        transferCWKuro: this.transferCWKuro,\n        transferKuroCW: this.transferKuroCW,\n        transferInKuro: this.transferInKuro,\n        sendST: this.sendST\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js"],"names":["React","Pact","Context","createContext","hosts","chainId","kuroUrls","createAPIHost","network","dumKeyPair","crypto","genKeyPair","savedAcct","localStorage","getItem","PactStore","Component","state","accountName","coinBalance","cwBalance","kuroBalance","convertDecimal","decimal","toString","includes","Math","floor","setAccountName","str","setState","setItem","getCoinBalance","cmd","fetch","local","pactCode","JSON","stringify","keyPairs","caps","lang","mkCap","meta","mkMeta","round","Date","getTime","data","console","log","status","substring","sendST","acct","amount","signCmd","int","parseFloat","sender","gasLimit","ttl","envData","wallet","sign","reqKey","sendSigned","err","alert","window","location","reload","sellHT","getCWBalance","getKuroBalance","transferCWKuro","transferKuroCW","transferInKuro","account","render","buyHT","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\n\nconst Context = React.createContext();\n\nconst hosts = [\"us2\", \"us1\", \"eu1\",\"eu2\",\"ap1\",\"ap2\"]\nconst chainId = \"3\";\nconst kuroUrls = [\"http://34.204.71.247:9002\", \"http://54.166.153.21:9000\", \"http://54.146.43.204:9001\", \"http://54.164.36.85:9003\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\nconst dumKeyPair = Pact.crypto.genKeyPair();\n\nconst savedAcct = localStorage.getItem('acct');\n\nexport class PactStore extends React.Component {\n\n  state = {\n    accountName: (savedAcct ? savedAcct : \"\"),\n    coinBalance: \"n/a\",\n    cwBalance: \"n/a\",\n    kuroBalance: \"n/a\"\n  }\n\n  convertDecimal = (decimal) => {\n    decimal = decimal.toString();\n    if (decimal[0] === \".\") {return chainId + decimal}\n    if (decimal.includes('.')) { return decimal }\n    if ((decimal / Math.floor(decimal)) === 1) {\n      decimal = decimal + \".0\"\n    }\n    return decimal\n  }\n\n  setAccountName = async (str) => {\n    this.setState({ accountName: str })\n    await localStorage.setItem('acct', str);\n  }\n\n  getCoinBalance = async () => {\n    const cmd = await Pact.fetch.local({\n      pactCode: `(user.silver-token.get-balance ${JSON.stringify(this.state.accountName)})`,\n      keyPairs: dumKeyPair,\n      caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n      meta: Pact.lang.mkMeta(\"not-real\", chainId, 0.0000001, 5000, (Math.round((new Date).getTime()/1000)-15), 28800)\n  }, createAPIHost(hosts[0], chainId))\n    const data = await cmd;\n    console.log(data)\n    if (data.status === \"success\") {\n      await this.setState({ coinBalance: data.data.toString().substring(0,15) })\n    } else {\n      await this.setState({ coinBalance: \"n/a\" })\n    }\n  }\n\n  sendST = async (acct, amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(user.silver-token.transfer ${JSON.stringify(acct)} ${amount})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.covid-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n            Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"coin.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)]),\n          ],\n          sender: \"st-gas-payer\",\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        }\n\n      const cmd = await Pact.wallet.sign(signCmd)\n      console.log(cmd)\n      const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId))\n      console.log(reqKey)\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  sellHT = async (amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(user.hybrid-exchange.sell-ht ${JSON.stringify(this.state.accountName)} ${amount})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"coin.TRANSFER\", [\"hybrid-mg\", this.state.accountName, parseFloat(amount)]),\n            Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"user.hybrid-exchange.REGISTERED_USER\", [this.state.accountName]),\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          network: \"testnet04\",\n          ttl: 28800,\n          envData: {}\n        }\n      const cmd = await Pact.wallet.sign(signCmd)\n      const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId))\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  getCWBalance = async () => {\n    const cmd = await Pact.fetch.local({\n      pactCode: `(user.hybrid-exchange.get-balance ${JSON.stringify(this.state.accountName)})`,\n      keyPairs: dumKeyPair,\n      caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n      meta: Pact.lang.mkMeta(\"not-real\", chainId, 0.0000001, 5000, (Math.round((new Date).getTime()/1000)-15), 28800)\n    }, createAPIHost(hosts[0], chainId))\n    const data = await cmd;\n    if (data.status === \"success\") {\n      await this.setState({ cwBalance: data.data.toString().substring(0,15) })\n    } else {\n      await this.setState({ cwBalance: \"n/a\" })\n    }\n\n  }\n\n  getKuroBalance = async () => {\n    const cmd = await Pact.fetch.local({\n      pactCode: `(hybrid-token.get-balance ${JSON.stringify(this.state.accountName)})`,\n      keyPairs: dumKeyPair\n    }, kuroUrls[0])\n    const data = await cmd;\n    if (data.status === \"success\") {\n      await this.setState({ kuroBalance: data.data.toString().substring(0,15)  })\n    } else {\n      await this.setState({ kuroBalance: \"n/a\" })\n    }\n\n  }\n\n  transferCWKuro = async (amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(user.hybrid-exchange.trans-to-priv ${JSON.stringify(this.state.accountName)} ${amount})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"user.hybrid-exchange.REGISTERED_USER\", [this.state.accountName])\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        }\n      const cmd = await Pact.wallet.sign(signCmd)\n      const reqKey = await Pact.wallet.sendSigned(cmd, createAPIHost(hosts[0], chainId))\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  transferKuroCW = async (amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(hybrid-token.transfer-to-cw ${JSON.stringify(this.state.accountName)} ${amount})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"hybrid-token.REGISTERED_USER\", [this.state.accountName])\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        }\n      const cmd = await Pact.wallet.sign(signCmd)\n      const reqKey = await Pact.wallet.sendSigned(cmd, kuroUrls[0])\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  transferInKuro = async (account, amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(hybrid-token.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(account)} ${amount})`,\n          caps: [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"Registered account capability\", \"is registered in hybrid-exchange\", \"hybrid-token.REGISTERED_USER\", [this.state.accountName])\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: chainId,\n          ttl: 28800,\n          envData: {}\n        }\n      const cmd = await Pact.wallet.sign(signCmd)\n      const reqKey = await Pact.wallet.sendSigned(cmd, kuroUrls[0])\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          setAccountName: this.setAccountName,\n          getCoinBalance: this.getCoinBalance,\n          getCWBalance: this.getCWBalance,\n          getKuroBalance: this.getKuroBalance,\n          buyHT: this.buyHT,\n          sellHT: this.sellHT,\n          transferCWKuro: this.transferCWKuro,\n          transferKuroCW: this.transferKuroCW,\n          transferInKuro: this.transferInKuro,\n          sendST: this.sendST\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}