{"ast":null,"code":"import _defineProperty from \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\nconst Context = React.createContext();\nconst dumKeyPair = Pact.crypto.genKeyPair();\nconst savedAcct = localStorage.getItem('acct');\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accountName: savedAcct ? savedAcct : \"\",\n      coinBalance: \"n/a\",\n      loading: false,\n      reqKey: \"\",\n      msg: \"\",\n      err: false\n    };\n\n    this.convertDecimal = decimal => {\n      decimal = decimal.toString();\n\n      if (decimal[0] === \".\") {\n        return \"0\" + decimal;\n      }\n\n      if (decimal.includes('.')) {\n        return decimal;\n      }\n\n      if (decimal / Math.floor(decimal) === 1) {\n        decimal = decimal + \".0\";\n      }\n\n      return decimal;\n    };\n\n    this.setAccountName = async str => {\n      this.setState({\n        accountName: str\n      });\n      await localStorage.setItem('acct', str);\n    };\n\n    this.getCoinBalance = async () => {\n      const cmd = await Pact.fetch.local({\n        pactCode: \"(user.silver-token.get-balance \".concat(JSON.stringify(this.state.accountName), \")\"),\n        keyPairs: dumKeyPair,\n        caps: [Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])],\n        meta: Pact.lang.mkMeta(config.meta.sender, config.meta.chainId, config.meta.gasPrice, config.meta.gasLimit, config.meta.creationTime(), config.meta.ttl)\n      }, config.meta.host);\n      const data = await cmd;\n\n      if (data.status === \"success\") {\n        await this.setState({\n          coinBalance: data.data.toString().substring(0, 15)\n        });\n      } else {\n        await this.setState({\n          coinBalance: \"n/a\"\n        });\n      }\n    };\n\n    this.listen = async reqKey => {\n      const res = await Pact.fetch.listen({\n        listen: reqKey\n      }, config.meta.host);\n      const be = \"https://explorer.chainweb.com/\".concat(config.meta.network.slice(0, -2), \"/tx/\").concat(reqKey);\n\n      if (res.data === 'success') {} else {\n        this.setState({\n          msg: 'There was an error processing your' + React.createElement(\"a\", {\n            href: be,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, \"tx\")\n        });\n      }\n    };\n\n    this.sendST = async (acct, amount) => {\n      amount = this.convertDecimal(amount);\n\n      try {\n        const signCmd = {\n          pactCode: \"(user.silver-token.transfer \".concat(JSON.stringify(this.state.accountName), \" \").concat(JSON.stringify(acct), \" \").concat(amount, \")\"),\n          caps: [// Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.st-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n          Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []), Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.silver-token.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)])],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: \"3\",\n          ttl: 28800,\n          envData: {}\n        };\n        console.log(signCmd);\n        const cmd = await Pact.wallet.sign(signCmd);\n        console.log(cmd);\n      } catch (err) {\n        console.log(err);\n        alert(\"you cancelled the TX or you did not have the wallet app open\");\n        window.location.reload();\n      }\n    };\n\n    this.mint = async amount => {\n      //conf param is to be IMPLEMENTED\n      //  left as a placeholder to check on backend that the fiat payment was received\n      this.setState({\n        loading: true,\n        msg: \"\"\n      });\n\n      try {\n        const res = await fetch(\"https://silver-token-api.chainweb.com/transaction/mint\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            type: \"mint\",\n            tx: {\n              account: this.state.accountName,\n              amount: amount,\n              conf: \"IMPLEMENT ME\"\n            }\n          })\n        });\n        const json = await res.json();\n        const reqKey = json.reqkey;\n        this.setState({\n          reqKey: reqKey\n        });\n        await this.listen(reqKey);\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          loading: false,\n          msg: \"\"\n        });\n        alert('There was a problem processing your transaction. Please try again');\n      }\n    };\n\n    this.burn = async amount => {\n      const res = await fetch(\"https://silver-token-api.chainweb.com/transaction/burn\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"burn\",\n          tx: {\n            account: this.state.accountName,\n            amount: amount\n          }\n        })\n      });\n      const json = await res.json();\n      const reqKey = json.reqkey;\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: _objectSpread({}, this.state, {\n        setAccountName: this.setAccountName,\n        getCoinBalance: this.getCoinBalance,\n        sendST: this.sendST,\n        mint: this.mint,\n        burn: this.burn\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/contexts/PactContext.js"],"names":["React","Pact","config","Context","createContext","dumKeyPair","crypto","genKeyPair","savedAcct","localStorage","getItem","PactStore","Component","state","accountName","coinBalance","loading","reqKey","msg","err","convertDecimal","decimal","toString","includes","Math","floor","setAccountName","str","setState","setItem","getCoinBalance","cmd","fetch","local","pactCode","JSON","stringify","keyPairs","caps","lang","mkCap","meta","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","data","status","substring","listen","res","be","network","slice","sendST","acct","amount","signCmd","parseFloat","envData","console","log","wallet","sign","alert","window","location","reload","mint","headers","method","body","type","tx","account","conf","json","reqkey","e","burn","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport config from '../var/config';\n\nconst Context = React.createContext();\n\nconst dumKeyPair = Pact.crypto.genKeyPair();\n\nconst savedAcct = localStorage.getItem('acct');\n\nexport class PactStore extends React.Component {\n\n  state = {\n    accountName: (savedAcct ? savedAcct : \"\"),\n    coinBalance: \"n/a\",\n    loading: false,\n    reqKey: \"\",\n    msg: \"\",\n    err: false\n  }\n\n  convertDecimal = (decimal) => {\n    decimal = decimal.toString();\n    if (decimal[0] === \".\") {return \"0\" + decimal}\n    if (decimal.includes('.')) { return decimal }\n    if ((decimal / Math.floor(decimal)) === 1) {\n      decimal = decimal + \".0\"\n    }\n    return decimal\n  }\n\n  setAccountName = async (str) => {\n    this.setState({ accountName: str })\n    await localStorage.setItem('acct', str);\n  }\n\n  getCoinBalance = async () => {\n    const cmd = await Pact.fetch.local\n      ({\n        pactCode: `(user.silver-token.get-balance ${JSON.stringify(this.state.accountName)})`,\n        keyPairs: dumKeyPair,\n        caps:\n          [\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", [])\n          ],\n        meta: Pact.lang.mkMeta\n          (\n            config.meta.sender,\n            config.meta.chainId,\n            config.meta.gasPrice,\n            config.meta.gasLimit,\n            config.meta.creationTime(),\n            config.meta.ttl\n          )\n      },\n      config.meta.host\n      )\n    const data = await cmd;\n    if (data.status === \"success\") {\n      await this.setState({ coinBalance: data.data.toString().substring(0,15) })\n    } else {\n      await this.setState({ coinBalance: \"n/a\" })\n    }\n  }\n\n  listen = async (reqKey) => {\n    const res = await Pact.fetch.listen({listen: reqKey}, config.meta.host);\n    const be = `https://explorer.chainweb.com/${config.meta.network.slice(0, -2)}/tx/${reqKey}`\n    if (res.data === 'success') {\n\n    } else {\n      this.setState({ msg: 'There was an error processing your' + <a href={be}>tx</a> })\n    }\n  }\n\n  sendST = async (acct, amount) => {\n    amount = this.convertDecimal(amount)\n    try {\n      const signCmd = {\n          pactCode: `(user.silver-token.transfer ${JSON.stringify(this.state.accountName)} ${JSON.stringify(acct)} ${amount})`,\n          caps: [\n            // Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"user.st-gas-station.GAS_PAYER\", [\"hi\", {int: 1}, 1.0]),\n            Pact.lang.mkCap(\"Gas capability\", \"description of gas cap\", \"coin.GAS\", []),\n            Pact.lang.mkCap(\"transfer capability\", \"description of transfer cap\", \"user.silver-token.TRANSFER\", [this.state.accountName, acct, parseFloat(amount)])\n          ],\n          sender: this.state.accountName,\n          gasLimit: 5000,\n          chainId: \"3\",\n          ttl: 28800,\n          envData: {}\n        }\n\n      console.log(signCmd)\n      const cmd = await Pact.wallet.sign(signCmd)\n      console.log(cmd)\n    } catch(err){\n      console.log(err);\n      alert(\"you cancelled the TX or you did not have the wallet app open\")\n      window.location.reload();\n    }\n  }\n\n  mint = async (amount) => {\n    //conf param is to be IMPLEMENTED\n    //  left as a placeholder to check on backend that the fiat payment was received\n    this.setState({ loading: true, msg: \"\" })\n    try {\n      const res = await fetch(`https://silver-token-api.chainweb.com/transaction/mint`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          type: \"mint\",\n        \ttx: {\n        \t\taccount: this.state.accountName,\n        \t\tamount: amount,\n        \t\tconf: \"IMPLEMENT ME\"\n        \t}\n        })\n      })\n      const json = await res.json();\n      const reqKey = json.reqkey;\n      this.setState({ reqKey: reqKey })\n      await this.listen(reqKey)\n    } catch (e) {\n      console.log(e);\n      this.setState({ loading: false, msg: \"\" })\n      alert('There was a problem processing your transaction. Please try again')\n    }\n\n  }\n\n  burn = async (amount) => {\n    const res = await fetch(`https://silver-token-api.chainweb.com/transaction/burn`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        type: \"burn\",\n        tx: {\n          account: this.state.accountName,\n          amount: amount\n        }\n      })\n    })\n    const json = await res.json();\n    const reqKey = json.reqkey;\n  }\n\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          setAccountName: this.setAccountName,\n          getCoinBalance: this.getCoinBalance,\n          sendST: this.sendST,\n          mint: this.mint,\n          burn: this.burn\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}