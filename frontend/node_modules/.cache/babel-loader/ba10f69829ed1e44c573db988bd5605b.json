{"ast":null,"code":"import _slicedToArray from \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/components/Home.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport logo from \"../logo.svg\";\nimport '../App.css';\nimport { Button, Grid, Input, Icon, Form, List, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactContext from \"../contexts/PactContext\";\n\nconst Home = () => {\n  const pactContext = useContext(PactContext);\n  useEffect(() => {\n    async function pactFetch() {\n      await pactContext.getCoinBalance();\n      await pactContext.getCWBalance();\n      await pactContext.getKuroBalance();\n    }\n\n    pactFetch();\n  }, []);\n\n  const pactFecth = async () => {\n    await pactContext.getCoinBalance();\n    await pactContext.getCWBalance();\n    await pactContext.getKuroBalance();\n  };\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        amountBuy = _useState2[0],\n        setAmountBuy = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        amountSell = _useState4[0],\n        setAmountSell = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        amountToCW = _useState6[0],\n        setAmountToCW = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        amountToKuro = _useState8[0],\n        setAmountToKuro = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        transferAmount = _useState10[0],\n        setTransferAmount = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        transferTo = _useState12[0],\n        setTransferTo = _useState12[1];\n\n  return React.createElement(Grid, {\n    columns: 2,\n    padded: true,\n    verticalAlign: \"top\",\n    style: {\n      backgroundColor: 'grey'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    textAlign: \"center\",\n    style: {\n      overflow: \"auto\",\n      backgroundColor: 'grey'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: require(\"../kadena.png\"),\n    style: {\n      height: 70,\n      marginTop: 120\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Header, {\n    as: \"h6\",\n    style: {\n      color: 'black',\n      fontWeight: 'bold',\n      fontSize: 40,\n      marginTop: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"BiLira\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    style: {\n      marginLeft: 100,\n      marginRight: 100,\n      marginTop: \"20px\",\n      marginBottom: 30,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Enter Your Account Name\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"What is Account Name? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Account Name is the unique sequence of characters that you use to identify yourself in chainweb. You'll be asked to sign with associated key/keys when you make transactions. Account names need to be unique and are assosciated to keypairs that can sign its transactions. The simplest way would be to use your public key as your account name\"))), React.createElement(Form.Input, {\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Account Name\",\n    value: pactContext.accountName,\n    onChange: e => pactContext.setAccountName(e.target.value),\n    action: React.createElement(Button, {\n      color: \"blue\",\n      onClick: () => pactFecth(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"redo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), \"update\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }))), React.createElement(Message, {\n    color: \"pink\",\n    style: {\n      marginLeft: 100,\n      marginRight: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"KDA Balance:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, pactContext.coinBalance)), React.createElement(Message, {\n    color: \"orange\",\n    style: {\n      marginLeft: 100,\n      marginRight: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Megabank Savings Account Balance:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, pactContext.cwBalance)), React.createElement(Message, {\n    color: \"yellow\",\n    style: {\n      marginLeft: 100,\n      marginRight: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Megabank Checking Account Balance:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, pactContext.kuroBalance)), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      marginBottom: 10,\n      marginTop: 20,\n      width: 340\n    },\n    onClick: () => pactFecth(),\n    disabled: !pactContext.accountName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Refresh Balances\")), React.createElement(Grid.Column, {\n    style: {\n      overflow: \"auto\",\n      backgroundColor: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h6\",\n    style: {\n      color: 'white',\n      fontWeight: 'bold',\n      fontSize: 30,\n      marginTop: 70,\n      marginBottom: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Savings Account Actions\"), React.createElement(Form.Field, {\n    style: {\n      width: \"440px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Buy Megabank Coin (KDA -> MBC)\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"What is  Megabank Coin? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"When you buy a Megabank Coin, you are trading your KDA 1:1 with this new digital currency that is spendable instantly (no need to wait for blockchain confirmation times). You will only be able to transfer these funds to pay others once you transfer them to your checking account. Note that you can always convert Megabank coins in your savings account back to KDA at the same 1:1 ratio.\"))), React.createElement(Form.Input, {\n    style: {\n      width: \"440px\"\n    },\n    icon: \"dollar sign\",\n    iconPosition: \"left\",\n    placeholder: \"Amount to Buy\",\n    value: amountBuy,\n    onChange: e => setAmountBuy(e.target.value),\n    action: React.createElement(Button, {\n      color: !isNaN(amountBuy) && amountBuy !== \"\" ? \"orange\" : \"grey\",\n      disabled: isNaN(amountBuy) || amountBuy === \"\",\n      onClick: () => pactContext.buyHT(amountBuy),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"buy MBC\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      width: \"440px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Sell Megabank Coin (MBC -> KDA)\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"What is Selling Megabank coin? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"When you sell Megabank coin, you are converting it back to KDA at a 1:1 ratio. Please note you need to have that amount of Megabank coin in your savings account before cashing out. If you still have the balance in your checking account, please transfer it to savings before attempting to cash out.\"))), React.createElement(Form.Input, {\n    style: {\n      width: \"440px\"\n    },\n    icon: \"dollar sign\",\n    iconPosition: \"left\",\n    placeholder: \"Amount to Sell\",\n    value: amountSell,\n    onChange: e => setAmountSell(e.target.value),\n    action: React.createElement(Button, {\n      color: !isNaN(amountSell) && amountSell !== \"\" ? \"orange\" : \"grey\",\n      disabled: isNaN(amountSell) || amountSell === \"\",\n      onClick: () => pactContext.sellHT(amountSell),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"sell MBC\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      width: \"440px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Transfer to Checking Account\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"What is Transfering To Checking Account? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Transfering to your checking account allows you to spend your Megabank coins instananeously by sending it to any participating individual or business.\"))), React.createElement(Form.Input, {\n    style: {\n      width: \"440px\"\n    },\n    icon: \"exchange\",\n    iconPosition: \"left\",\n    placeholder: \"Amount to Transfer to Checking\",\n    value: amountToKuro,\n    onChange: e => setAmountToKuro(e.target.value),\n    action: React.createElement(Button, {\n      style: {\n        width: 96\n      },\n      color: !isNaN(amountToKuro) && amountToKuro !== \"\" ? \"orange\" : \"grey\",\n      disabled: isNaN(amountToKuro) || amountToKuro === \"\",\n      onClick: () => pactContext.transferCWKuro(amountToKuro),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"transfer\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }))), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h6\",\n    style: {\n      color: 'white',\n      fontWeight: 'bold',\n      fontSize: 30,\n      marginTop: 40,\n      marginBottom: 20,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Checking Account Actions\"), React.createElement(Form.Field, {\n    style: {\n      width: \"440px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Transfer to Savings account\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"What is Transfering To Savings Account? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Transfering to your savings account allows you to cash out your Megabank coins back to KDA at a 1:1 ratio once the transfer between checking and savings account is complete\"))), React.createElement(Form.Input, {\n    style: {\n      width: \"440px\"\n    },\n    icon: \"exchange\",\n    iconPosition: \"left\",\n    placeholder: \"Amount to Transfer to Savings\",\n    value: amountToCW,\n    onChange: e => setAmountToCW(e.target.value),\n    action: React.createElement(Button, {\n      style: {\n        width: 96\n      },\n      color: !isNaN(amountToCW) && amountToCW !== \"\" ? \"orange\" : \"grey\",\n      disabled: isNaN(amountToCW) || amountToCW === \"\",\n      onClick: () => pactContext.transferKuroCW(amountToCW),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"transfer\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      width: \"440px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\",\n      marginBottom: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Pay People or Businesses\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, \"Who can I pay? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, \"You can pay any entity (indiviudal or business), with a registered Megabank coin account in a cryptographically safe, but instantaneous manner\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"440px\",\n      marginBottom: 3\n    },\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Account Name\",\n    value: transferTo,\n    onChange: e => setTransferTo(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }), React.createElement(Input, {\n    style: {\n      width: \"440px\"\n    },\n    icon: \"dollar sign\",\n    iconPosition: \"left\",\n    placeholder: \"Amount\",\n    value: transferAmount,\n    onChange: e => setTransferAmount(e.target.value),\n    action: React.createElement(Button, {\n      color: !isNaN(transferAmount) && transferAmount !== \"\" && transferTo !== \"\" ? \"orange\" : \"grey\",\n      disabled: isNaN(transferAmount) || transferAmount === \"\" || transferTo === \"\",\n      onClick: () => pactContext.transferInKuro(transferTo, transferAmount),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"pay MBC\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/silver-token/frontend/src/components/Home.js"],"names":["React","useState","useEffect","useContext","Button","Grid","Input","Icon","Form","List","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","PactContext","Home","pactContext","pactFetch","getCoinBalance","getCWBalance","getKuroBalance","pactFecth","amountBuy","setAmountBuy","amountSell","setAmountSell","amountToCW","setAmountToCW","amountToKuro","setAmountToKuro","transferAmount","setTransferAmount","transferTo","setTransferTo","backgroundColor","overflow","require","height","marginTop","color","fontWeight","fontSize","marginLeft","marginRight","marginBottom","textAlign","accountName","e","setAccountName","target","value","coinBalance","cwBalance","kuroBalance","width","margin","isNaN","buyHT","sellHT","transferCWKuro","transferKuroCW","transferInKuro"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport { Button, Grid, Input, Icon, Form, List,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactContext from \"../contexts/PactContext\";\n\n\nconst Home = () => {\n\n  const pactContext = useContext(PactContext);\n\n  useEffect(() => {\n    async function pactFetch() {\n      await pactContext.getCoinBalance();\n      await pactContext.getCWBalance();\n      await pactContext.getKuroBalance();\n    }\n    pactFetch();\n  }, [])\n\n  const pactFecth = async () => {\n    await pactContext.getCoinBalance();\n    await pactContext.getCWBalance();\n    await pactContext.getKuroBalance();\n  }\n\n  const [amountBuy, setAmountBuy] = useState(\"\");\n  const [amountSell, setAmountSell] = useState(\"\");\n  const [amountToCW, setAmountToCW] = useState(\"\");\n  const [amountToKuro, setAmountToKuro] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [transferTo, setTransferTo] = useState(\"\");\n\n\n  return (\n    <Grid columns={2} padded verticalAlign=\"top\" style={{backgroundColor: 'grey'}}>\n      <Grid.Column textAlign=\"center\" style={{overflow: \"auto\", backgroundColor: 'grey'}}>\n        <img src={require(\"../kadena.png\")} style={{height:70, marginTop: 120}}/>\n        <Header as=\"h6\" style={{color:'black', fontWeight: 'bold', fontSize: 40, marginTop: 40}}>\n          BiLira\n        </Header>\n        <Form>\n          <Form.Field  style={{marginLeft: 100, marginRight: 100, marginTop: \"20px\", marginBottom: 30, textAlign: \"left\"}} >\n            <label style={{color: \"#054F9E\" }}>Enter Your Account Name\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n              <Popup.Header>What is Account Name? </Popup.Header>\n              <Popup.Content>Account Name is the unique sequence of characters that you use to identify yourself in chainweb. You'll be asked to sign with associated key/keys when you make transactions. Account names need to be unique and are assosciated to keypairs that can sign its transactions. The simplest way would be to use your public key as your account name</Popup.Content>\n              </Popup>\n            </label>\n              <Form.Input\n                icon='user'\n                iconPosition='left'\n                placeholder='Account Name'\n                value={pactContext.accountName}\n                onChange={(e) => pactContext.setAccountName(e.target.value)}\n                action={\n                   <Button\n                   color='blue'\n                   onClick={() => pactFecth()}\n                   >\n                    <Icon name=\"redo\"/>\n                    update\n                   </Button>\n                 }\n              />\n          </Form.Field>\n        </Form>\n        <Message color=\"pink\" style={{marginLeft: 100, marginRight: 100}}>\n          <Message.Header>\n            KDA Balance:\n          </Message.Header>\n          <div>\n            {pactContext.coinBalance}\n          </div>\n        </Message>\n        <Message color=\"orange\" style={{marginLeft: 100, marginRight: 100}}>\n          <Message.Header>\n            Megabank Savings Account Balance:\n          </Message.Header>\n          <div>\n            {pactContext.cwBalance}\n          </div>\n        </Message>\n        <Message color=\"yellow\" style={{marginLeft: 100, marginRight: 100}}>\n          <Message.Header>\n            Megabank Checking Account Balance:\n          </Message.Header>\n          <div>\n            {pactContext.kuroBalance}\n          </div>\n        </Message>\n        <Button\n            style={{\n              backgroundColor: \"#054F9E\",\n              color: \"white\",\n              marginBottom: 10,\n              marginTop: 20,\n              width: 340,\n              }}\n            onClick={() => pactFecth()}\n            disabled={!pactContext.accountName}\n          >\n          Refresh Balances\n        </Button>\n      </Grid.Column>\n      <Grid.Column style={{overflow: \"auto\", backgroundColor: \"#054F9E\"}}>\n        <Form>\n          <Header as=\"h6\" style={{color:'white', fontWeight: 'bold', fontSize: 30, marginTop: 70, marginBottom: 20, textAlign: 'center'}}>\n            Savings Account Actions\n          </Header>\n          <Form.Field  style={{width:\"440px\", margin: \"0 auto\", marginTop: \"10px\"}} >\n            <label style={{color: \"white\"}}>Buy Megabank Coin (KDA -> MBC)\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n                <Popup.Header>What is  Megabank Coin? </Popup.Header>\n                <Popup.Content>When you buy a Megabank Coin, you are trading your KDA 1:1 with this new digital currency that is spendable instantly (no need to wait for blockchain confirmation times). You will only be able to transfer these funds to pay others once you transfer them to your checking account. Note that you can always convert Megabank coins in your savings account back to KDA at the same 1:1 ratio.</Popup.Content>\n              </Popup>\n            </label>\n              <Form.Input\n                style={{width:\"440px\"}}\n                icon='dollar sign'\n                iconPosition='left'\n                placeholder='Amount to Buy'\n                value={amountBuy}\n                onChange={(e) => setAmountBuy(e.target.value)}\n                action={\n                   <Button\n                   color={(!isNaN(amountBuy) && amountBuy !== \"\") ? \"orange\" : \"grey\"}\n                   disabled={isNaN(amountBuy) || amountBuy === \"\"}\n                   onClick={() =>  pactContext.buyHT(amountBuy)}\n                   >\n                    buy MBC\n                   </Button>\n                 }\n              />\n          </Form.Field>\n          <Form.Field  style={{width:\"440px\", margin: \"0 auto\", marginTop: \"10px\"}} >\n            <label style={{color: \"white\"}}>Sell Megabank Coin (MBC -> KDA)\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n                <Popup.Header>What is Selling Megabank coin? </Popup.Header>\n                <Popup.Content>When you sell Megabank coin, you are converting it back to KDA at a 1:1 ratio. Please note you need to have that amount of Megabank coin in your savings account before cashing out. If you still have the balance in your checking account, please transfer it to savings before attempting to cash out.</Popup.Content>\n              </Popup>\n            </label>\n              <Form.Input\n                style={{width:\"440px\"}}\n                icon='dollar sign'\n                iconPosition='left'\n                placeholder='Amount to Sell'\n                value={amountSell}\n                onChange={(e) => setAmountSell(e.target.value)}\n                action={\n                   <Button\n                   color={(!isNaN(amountSell) && amountSell !== \"\") ? \"orange\" : \"grey\"}\n                   disabled={isNaN(amountSell) || amountSell === \"\"}\n                   onClick={() =>  pactContext.sellHT(amountSell)}\n                   >\n                    sell MBC\n                   </Button>\n                 }\n              />\n          </Form.Field>\n          <Form.Field  style={{width:\"440px\", margin: \"0 auto\", marginTop: \"10px\"}} >\n            <label style={{color: \"white\"}}>Transfer to Checking Account\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n                <Popup.Header>What is Transfering To Checking Account? </Popup.Header>\n                <Popup.Content>Transfering to your checking account allows you to spend your Megabank coins instananeously by sending it to any participating individual or business.</Popup.Content>\n              </Popup>\n            </label>\n              <Form.Input\n                style={{width:\"440px\"}}\n                icon='exchange'\n                iconPosition='left'\n                placeholder='Amount to Transfer to Checking'\n                value={amountToKuro}\n                onChange={(e) => setAmountToKuro(e.target.value)}\n                action={\n                   <Button\n                   style={{width: 96}}\n                   color={(!isNaN(amountToKuro) && amountToKuro !== \"\") ? \"orange\" : \"grey\"}\n                   disabled={isNaN(amountToKuro) || amountToKuro === \"\"}\n                   onClick={() =>  pactContext.transferCWKuro(amountToKuro)}\n                   >\n                    transfer\n                   </Button>\n                 }\n              />\n          </Form.Field>\n        </Form>\n        <Form>\n          <Header as=\"h6\" style={{color:'white', fontWeight: 'bold', fontSize: 30, marginTop: 40, marginBottom: 20, textAlign: 'center'}}>\n            Checking Account Actions\n          </Header>\n          <Form.Field  style={{width:\"440px\", margin: \"0 auto\", marginTop: \"10px\"}} >\n            <label style={{color: \"white\"}}>Transfer to Savings account\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n                <Popup.Header>What is Transfering To Savings Account? </Popup.Header>\n                <Popup.Content>Transfering to your savings account allows you to cash out your Megabank coins back to KDA at a 1:1 ratio once the transfer between checking and savings account is complete</Popup.Content>\n              </Popup>\n            </label>\n              <Form.Input\n                style={{width:\"440px\"}}\n                icon='exchange'\n                iconPosition='left'\n                placeholder='Amount to Transfer to Savings'\n                value={amountToCW}\n                onChange={(e) => setAmountToCW(e.target.value)}\n                action={\n                   <Button\n                   style={{width: 96}}\n                   color={(!isNaN(amountToCW) && amountToCW !== \"\") ? \"orange\" : \"grey\"}\n                   disabled={isNaN(amountToCW) || amountToCW === \"\"}\n                   onClick={() =>  pactContext.transferKuroCW(amountToCW)}\n                   >\n                    transfer\n                   </Button>\n                 }\n              />\n          </Form.Field>\n          <Form.Field  style={{width:\"440px\", margin: \"0 auto\", marginTop: \"10px\", marginBottom: 100}} >\n            <label style={{color: \"white\"}}>Pay People or Businesses\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n                <Popup.Header>Who can I pay? </Popup.Header>\n                <Popup.Content>You can pay any entity (indiviudal or business), with a registered Megabank coin account in a cryptographically safe, but instantaneous manner</Popup.Content>\n              </Popup>\n            </label>\n            <div>\n              <Input\n                style={{width:\"440px\", marginBottom: 3}}\n                icon='user'\n                iconPosition='left'\n                placeholder='Account Name'\n                value={transferTo}\n                onChange={(e) => setTransferTo(e.target.value)}\n              />\n              <Input\n                style={{width:\"440px\"}}\n                icon='dollar sign'\n                iconPosition='left'\n                placeholder='Amount'\n                value={transferAmount}\n                onChange={(e) => setTransferAmount(e.target.value)}\n                action={\n                   <Button\n                   color={(!isNaN(transferAmount) && transferAmount !== \"\" && transferTo !== \"\") ? \"orange\" : \"grey\"}\n                   disabled={isNaN(transferAmount) || transferAmount === \"\" || transferTo === \"\"}\n                   onClick={() =>  pactContext.transferInKuro(transferTo, transferAmount)}\n                   >\n                    pay MBC\n                   </Button>\n                 }\n              />\n            </div>\n          </Form.Field>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}